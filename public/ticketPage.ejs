<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>GrantMatcher</title>
    <%- head %>
</head>
<body>
    <!-- Navigation (sticky header). Links and dropdown collapse into a hamburger menu when the screen size is small. -->
    <nav class="navbar navbar-expand-lg navbar-dark px-3" id="navbar">
        <!-- Brand on the left -->
        <a class="navbar-brand bigBrand" href="/" id="navbar-brand">Grant Matcher</a>

        <!-- Toggler (for mobile view) -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" id="navbar-toggler">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navbar links on the right -->
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <!-- Links here -->
                <li class="nav-item">
                    <a class="nav-link" href="/">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/tickets">Tickets</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/tutorial">Tutorial</a>
                </li>

                <!-- Dropdown (user menu) -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa fa-user-circle-o"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li><a class="dropdown-item" href="/profile">Profile</a></li>
                        <li><a class="dropdown-item" href="/settings">Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <!-- Logout button (opens a modal) -->
                        <li><button class="dropdown-item" id="modalBtn1" onclick="openModal(1)">Logout</button></li>
                    </ul>
                </li>
            </ul>
        </div>
    </nav>

    <!-- The modal the logout button in the navigation bar opens -->
    <div id="modal1" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Log out</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close1">&times;</span>
            </div>
            
            <!-- Confirmation message (for user control) -->
            <p>Are you sure you want to log out?</p>
            <div class="together">
                <form method="post" action="/">
                    <input type="submit" value="Logout!" class="buttonStyle">
                </form>
                <button id='cancel1' class="buttonStyle">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Error modal -->
    <div id="modal2" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Error!</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close2">&times;</span>
            </div>
            <hr/>
            
            <p id="showAlert"><%= showAlert %></p>
        </div>
    </div>

    <!-- Edit ticket modal -->
    <div id="modal3" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Edit Ticket</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close3">&times;</span>
            </div>
            <hr/>

            <div style="width: 100%;">
                <label><b>TITLE</b></label>
                <input type="text" id="editTicketTitle" class="form-control" name="editTicketTitle" required>
            </div><br>

            <div class="together">
                <div style="width: 100%;">
                    <label><b>TAGS</b>
                        <!-- TODO: add tooltip -->
                    </label><br>
                    <select name="editTicketTags" id="editTicketTags" class="form-control" style="width: 100%" multiple>
                        <option value="bug">Bug Report</option>
                        <option value="feedback">Feedback</option>
                        <option value="inquiry">Inquiry</option>
                        <option value="report">User Report</option>
                        <option value="help">Tech Help</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                
                <div style="width: 100%;">
                    <label><b>MEMBERS</b>
                        <!-- TODO: add tooltip -->
                    </label><br>
                    <select name="editTicketMembers" id="editTicketMembers" class="form-control" style="width: 100%" multiple>
                    </select>
                </div>
            </div>
            <br>

            <label><b>CONTENT</b>
                <!-- TODO: add tooltip -->
            </label><br>
            <textarea id="editTicketContent" name="editTicketContent" class="form-control" style="width: 100%"></textarea><br>

            <label><b>REASON FOR EDIT</b></label>
            <p>Why did you edit your ticket?</p>
            <textarea id="editTicketReason" class="form-control"></textarea><br>

            <div class="together">
                <button id='cancel3' class="buttonStyle blue" style="width: 100%;">Cancel</button>
                <button class="buttonStyle pink" onclick="editTicket()" style="width: 100%;">Edit Ticket</button>
            </div>
            <br>
        </div>
    </div>

    <!-- Resolve ticket modal -->
    <div id="modal4" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Resolve Ticket</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close4">&times;</span>
            </div>
            <!-- TODO: use of <hr> in modals is inconsistent. please change.-->
            <hr/>
            
            <p>TODO</p>
            <button id='cancel4' class="buttonStyle">Cancel</button>
        </div>
    </div>

    <!-- Reply version history modal -->
    <div id="modal5" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Version Information</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close5">&times;</span>
            </div>
            <hr/>
            
            <p id="replyVersionP"><b>Current Version:</b> <span id="replyVersionSpan"></span></p>
            <p id="replyReasonP"><b>Reason for Edit:</b> <span id="replyReasonSpan"></span></p>
            <!-- Accordion items are added here -->
            <div class="accordion" id="replyAccordion">
            </div>
        </div>
    </div>

    <!-- Send reply modal -->
    <div id="modal6" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Resolve Ticket</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close6">&times;</span>
            </div>
            <hr/>
            
            <p>Are you sure you want to send this reply?</p>
            <div class="together">
                <button class="buttonStyle" onclick="sendReply()">Send Reply</button>
                <button id='cancel6' class="buttonStyle">Cancel</button>
            </div>
        </div>
    </div>

    <!-- When the user didn't fill in all the inputs correctly (front-end check) -->
    <div id="modal7" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Woops!</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close7">&times;</span>
            </div>
            <hr/>
            
            <p>Please ensure that you have filled in all areas.</p>
        </div>
    </div>

    <!-- Reply edit modal -->
    <div id="modal8" class="modal">
        <div class="modal-body">
            <div class="together">
                <h2>Edit Reply</h2>
                <!-- Numbering the IDs so I can use many modals (code reuse) -->
                <span class="close" id="close8">&times;</span>
            </div>
            <hr/>
            
            <label><b>EDIT CONTENT</b></label>
            <textarea id="editReplyContent" class="form-control"></textarea><br>

            <label><b>REASON FOR EDIT</b></label>
            <p>Why did you edit your reply?</p>
            <textarea id="editReplyReason" class="form-control"></textarea><br>

            <button class="buttonStyle" id="editReply">Edit Reply</button>
            <button id='cancel8' class="buttonStyle">Cancel</button>
        </div>
    </div>

    <!-- The main content -->
    <main>
        <section>
            <!-- TODO: add the X icon for all pages-->
            <h1>Ticket</h1>
        </section>
        <hr/>

        <% if (ticketList.length == 0) { %>
            <section>
                <h2>Ticket cannot be found.</h2>
                <p>Something went wrong. Please email me at flyingbutter213@gmail.com if this issue persists.</p>
            </section>
        <% } else { %>
            <% ticket = ticketList[0] %>
            <section>
                <!-- if the user is the poster, you have to add an edit icon -->
                <% if (user == ticket.userEmail) { %>
                    <div class="together align-items-center" style="justify-content: space-between;">
                        <div>
                <% } %>

                <!-- get the ticket's tags-->
                <% ticketTags = [] %>
                <% if (ticket.tags.includes('other')) { %>
                    <% ticketTags.push('Other') %>
                <% } %>
                <% if (ticket.tags.includes('bug')) { %>
                    <% ticketTags.push('Bug Report') %>
                <% } %>
                <%  if (ticket.tags.includes('feedback')) { %>
                    <% ticketTags.push('Feedback') %>
                <% } %>
                <%  if (ticket.tags.includes('inquiry')) { %>
                    <% ticketTags.push('Inquiry') %>
                <% } %>
                <%  if (ticket.tags.includes('report')) { %>
                    <% ticketTags.push('User Report') %>
                <% } %>
                <% if (ticket.tags.includes('help')) { %>
                    <% ticketTags.push('Tech Help') %>
                <% } %>
                
                <h2>
                    <%= ticket.title %> (<%= ticketTags.join(', ') %>)
                    <!-- handle resolution status (question mark for unresolved, checkmark for resolved) -->
                    <% if (ticket.resolutionDetails.length == 0) { %>
                        <i class="fa fa-question"></i>
                    <% } else { %>
                        <i class="fa fa-check"></i>
                    <% } %> 
                </h2>

                <% if (user == ticket.userEmail) { %>
                        </div>
                        <div>
                            <i class="fa fa-pencil-square-o" onclick="openModal(3)"></i>
                        </div>
                    </div>
                <% } %>
                
                <div class="together align-items-center" style="justify-content: space-between;">
                    <div>
                        <p style="font-size: 0.8em"><%= ticket.username %> on <%= ticket.ticketDate %></p>
                    </div>
                    <div>
                        <!-- tooltip for other ticket members -->
                        <button style="padding: 0" type="button" class="btn" data-toggle="tooltip" data-placement="top" title="<%= ticket.membersNames.join(', ') %>">
                            <p style="font-size: 0.8em">+ <%= ticket.membersNames.length %> others</p>
                        </button>
                    </div>
                </div>
                <!-- the ticket's content -->
                <p style="overflow: auto;"><%= ticket.content %></p><br>

                <!-- resolution button-->
                <% if (user == ticket.userEmail) { %>
                    <button class="buttonStyle pink" onclick="openModal(4)">Resolve Ticket</button>
                <% } %>
            </section>
            <hr/>

            <section>
                <h2>Version Information</h2>
                <p id="ticketVersionP"><b>Current Version:</b> <span id="ticketVersionSpan"></span></p>
                <p id="ticketReasonP"><b>Reason for Edit:</b> <span id="ticketReasonSpan"></span></p>
                <!-- Accordion items are added here -->
                <div class="accordion" id="ticketAccordion">
                </div>
            </section>
            <hr/>

            <section>
                <h2>Replies</h2>
                <% for (var r = 0; r < replies.length; r ++) { %>
                    <% if (replies[r].userEmail == user) { %>
                        <div style="margin-bottom: 10px; border: 2px solid black; padding: 5px;">
                            <div id="replyContent<%= parseInt(r) + 1 %>" style="overflow: auto;"><%= replies[r].content %></div>
                            
                            <div style="display: flex; justify-content: right; align-items: flex-end;" style="overflow: auto;">
                                <p style="margin: 0">#<%= parseInt(r) + 1 %> -<%= replies[r].username %> on <%= replies[r].replyDate %></p>
                                <button style="margin-left: 5px; margin-right: 5px; padding: 0; padding-right: 2px; padding-left: 2px;" class="buttonStyle pink" onclick="loadEditReply(<%= parseInt(r) + 1 %>, <%= replies[r].replyID %>)"><i class="fa fa-pencil-square-o"></i></button>
                                <button style="margin-left: 5px; margin-right: 5px; padding: 0; padding-right: 2px; padding-left: 2px;" class="buttonStyle" onclick="loadReplyHistory(<%= parseInt(r) + 1 %>, <%= replies[r].replyID %>)"><i class="fa fa-history"></i></button>
                            </div>
                        </div>
                    <% } else { %>
                        <div style="margin-bottom: 10px; border: 2px solid black; padding: 5px;">
                            <div id="replyContent<%= parseInt(r) + 1 %>" style="overflow: auto;"><%= replies[r].content %></div>
                            
                            <div style="display: flex; justify-content: right;" style="overflow: auto;">
                                <p style="margin: 0">#<%= parseInt(r) + 1 %> -<%= replies[r].username %> on <%= replies[r].replyDate %></p>
                                <button style="margin-left: 5px; margin-right: 5px; padding: 0; padding-right: 2px; padding-left: 2px;" class="buttonStyle" onclick="loadReplyHistory(<%= parseInt(r) + 1 %>, <%= replies[r].replyID %>)"><i class="fa fa-history"></i></button>
                            </div>
                        </div>
                    <% } %>
                <% } %>
                
                <h3>Reply to the Discussion</h3>
                <div style="width: 100%; justify-content: space-between;" class="together align-items-center">
                    <div>
                        <i onclick="wrapText('**', '**')" class="fa fa-bold" style="padding-left: 5px; font-size: 20px;"></i>
                        <i onclick="wrapText('*', '*')" class="fa fa-italic" style="padding-left: 10px; font-size: 20px;"></i>
                        <i onclick="wrapText('-', '-')" class="fa fa-strikethrough" style="padding-left: 10px; font-size: 20px;"></i>
                        <i onclick="wrapText('_', '_')" class="fa fa-underline" style="padding-left: 10px; font-size: 20px;"></i>
                    </div>
                    <div>
                        <button class="buttonStyle blue" style="padding-top: 0; padding-bottom: 0; margin-bottom: 10px;">Reset</button> <button onclick="openModal(6)" class="buttonStyle pink" style="padding-top: 0; padding-bottom: 0; margin-bottom: 10px;">Submit</button>
                    </div>
                    
                </div>
                <textarea style="width: 100%;" id="newReply" class="form-control"></textarea>
                <br>
            </section>
        <% } %>
    </main>
    
    <!-- EJS partial (for code reuse and efficiency) -->
    <%- footer %>

    <!-- Bootstrap for JS -->
    <script type="text/javascript" src="https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.min.js"></script>
    <!-- This file allows for the user to interact with the elements on the site and for the site to give feedback to the user -->
    <script src="/script.js"></script>
    <!-- JQuery for the tooltip -->
    <script>
        $(function () {
  $('[data-toggle="tooltip"]').tooltip()
})
    </script>
    <script>
        // show alerts
        if ("<%= showAlert %>" != "no") {
            openModal(2);
        }
    </script>
    <script>
    // Function to wrap selected text with start and end tags (e.g., for bold or italic formatting)
    function wrapText(startTag, endTag) {
      const textarea = document.getElementById('newReply');
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;

      // Get the selected text
      const selectedText = text.substring(start, end);

      // Replace the selected text with formatted text
      const formattedText = startTag + selectedText + endTag;
      textarea.value = text.substring(0, start) + formattedText + text.substring(end);

      // Reposition the cursor
      textarea.selectionStart = start;
      textarea.selectionEnd = start + formattedText.length;

      // Focus back on the textarea
      textarea.focus();
    }

    // Function to insert text at the cursor position
    function insertText(textToInsert) {
      const textarea = document.getElementById('newReply');
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;

      // Insert the text at the cursor position
      textarea.value = text.substring(0, start) + textToInsert + text.substring(end);

      // Update cursor position
      textarea.selectionStart = textarea.selectionEnd = start + textToInsert.length;

      // Focus back on the textarea
      textarea.focus();
    }
    </script>
    <script>
        function sendReply() {
            replyArea = document.getElementById("newReply").value

            // ensure the reply isnt empty
            if (replyArea.trim() == '') {
                document.getElementById('modal6').style.display = 'none'
                openModal(7)
            } else {
                // add the reply to the database
                fetch('/addreply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({content: replyArea, id: '<%= ticket.ticketID %>'})
                }).then(response => response.json()).then(result => {
                    document.getElementById("modal6").style.display = 'none'
                    if (result.status == "error") {
                        // open the error modal if there is an error
                        console.log(result)
                        document.getElementById('showAlert').textContent = result.alert
                        openModal(2)
                    } else {
                        window.location.reload()
                    }
                })
            }
        }
    </script>
    <script>
        function loadEditReply(r, id) {
            console.log(r, id)
            // ensure r and id are integers
            if (Number.isInteger(r) && Number.isInteger(id)) {
                // reset and change the button's onclick parameters
                document.getElementById("editReply").removeAttribute('onclick')
                document.getElementById("editReply").setAttribute('onclick', 'editReply(' + id + ')')
            
                // add the content into the editReplyContent so the user doesnt have to retype everything (efficiency)
                document.getElementById("editReplyContent").value = document.getElementById('replyContent' + r).textContent

                // open the edit modal
                openModal(8)
            } else {
                document.getElementById('showAlert').textContent = "Something went wrong loading the edit modal. Please retry."
                openModal(2)
            }
        }

        function loadReplyHistory(r, id) {
            console.log(r, id)
            // ensure r and id are integers
            if (Number.isInteger(r) && Number.isInteger(id)) {
                // iterate over each reply in the database
                <% for (var i = 0; i < replies.length; i++ ) { %>
                    // find the reply that has the same ID as the parameter
                    if (<%= replies[i].replyID %> == id) { 
                        // get its version information
                        <% versionInfo = replies[i].versionInformation %>

                        <% if (versionInfo.length > 0) { %>
                            dateCurrent = '<%= replies[i].replyDate %>'
                            reasonCurrent = 'First version.'

                            // get the accordion
                            accordion = document.getElementById("replyAccordion")
                            // reset accordion content
                            accordion.innerHTML = ''

                            // loop through each version
                            <% for (var v = 0; v < versionInfo.length; v ++) { %>
                                // get the information of the version
                                id = <%= v %> + 1
                                content = '<%= versionInfo[v][0] %>'
                                reasonNext = '<%= versionInfo[v][1] %>'
                                dateNext = '<%= versionInfo[v][2] %>'

                                // create an accordion item HTML for it
                                accordionItem = `<div class="accordion-item">
                                    <h2 class="accordion-header" id="heading1-${id}">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse1-${id}" aria-expanded="true" aria-controls="collapse1-${id}">
                                        Version ${id} (${dateCurrent})
                                    </button>
                                    </h2>
                                    <div id="collapse1-${id}" class="accordion-collapse collapse" aria-labelledby="heading1-${id}" data-bs-parent="#accordionExample">
                                    <div class="accordion-body">
                                        <b>Reply Content: </b>
                                        <p>${content}</p><br>
                                        <p><b>Reason for edit:</b> ${reasonCurrent}</p>
                                    </div>
                                    </div>
                                </div>`

                                accordion.innerHTML += accordionItem // add to the accordion

                                // update reason and date
                                dateCurrent = dateNext
                                reasonCurrent = reasonNext
                            <% } %>

                            // current version / reason
                            document.getElementById("replyVersionSpan").textContent = `Version ${parseInt(<%= v %>)+2} (${dateCurrent})`
                            document.getElementById("replyReasonSpan").textContent = reasonCurrent
                        <% } else { %>
                            document.getElementById("replyVersionSpan").textContent = `Version 1 (<%= replies[i].replyDate %>)`
                            document.getElementById("replyReasonP").style.display = "none"
                        <% } %>
                    }
                <% } %>

                openModal(5)
            } else {
                document.getElementById('showAlert').textContent = "Something went wrong loading the edit modal. Please retry."
                openModal(2)
            }
        }

        function editReply(replyID) {
            // get the user input
            newContent = document.getElementById('editReplyContent').value
            reason = document.getElementById('editReplyReason').value

            if (newContent.trim() == '' || reason.trim() == '') {
                openModal(7)
            } else {
                // send the edit info to the server
                fetch('/editreply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({content: newContent, reason: reason, id: replyID})
                }).then(response => response.json()).then(result => {
                    document.getElementById("modal8").style.display = 'none'
                    if (result.status == "error") {
                        // open the error modal if there is an error
                        console.log(result)
                        document.getElementById('showAlert').textContent = result.alert
                        openModal(2)
                    } else {
                        window.location.reload()
                    }
                })
            }
        }
    </script>
    <script>
        // wait for a condition to be true
        const waitFor = (conditionFn, callback, interval = 50) => {
            const checker = setInterval(() => {
            if (conditionFn()) {
                clearInterval(checker);
                callback();
            }
            }, interval);
        };

        // setup default values in edit ticket
        function setUpEditTickets() {
            <% if (ticketList.length == 0) { %>
                console.log("womp womp")
            <% } else { %>
                <% ticket = ticketList[0] %>

                // text fields
                document.getElementById("editTicketTitle").value = '<%= ticket.title %>'
                document.getElementById("editTicketContent").value = '<%= ticket.content %>'

                // multi-select fields (tag)
                tagsSelect = document.getElementById('editTicketTags');
                <% for (var t = 0; t < ticket.tags.length; t++) { %>
                    <% currentTag = ticket.tags[t] %>
                    for (let i = 0; i < tagsSelect.options.length; i++) {
                        if (tagsSelect.options[i].value == '<%= currentTag %>') {
                            tagsSelect.options[i].selected = true; // select it if its the same as the current tag
                            break;
                        }
                    }
                <% } %>

                // multi-select fields (members)
                membersSelect = document.getElementById('editTicketMembers');
                <% for (var m = 0; m < ticket.members.length; m++) { %>
                    <% currentMember = ticket.members[m] %>
                    for (let i = 0; i < membersSelect.options.length; i++) {
                        if (membersSelect.options[i].value == '<%= currentMember %>') {
                            membersSelect.options[i].selected = true; // select it if its the same as the current member
                            break;
                        }
                    }
                <% } %>
            <% } %>
        }

        // wait for membersSelect to be initialised (otherwise editTicketMembers is empty)
        waitFor(
            () => editTicketMembersInitialised === true,
            () => {
                setUpEditTickets()
            }
        );

        function editTicket() {
            <% if (ticketList.length == 0) { %>
                console.log("womp womp")
            <% } else { %>
                title = document.getElementById("editTicketTitle").value
                content = document.getElementById("editTicketContent").value
                reason = document.getElementById("editTicketReason").value
                tags = Array.from(document.getElementById('editTicketTags').options)
                    .filter(option => option.selected)
                    .map(option => option.value);
                members = Array.from(document.getElementById('editTicketMembers').options)
                    .filter(option => option.selected)
                    .map(option => option.value);
                
                // open error modal if its invalid
                if (title.trim() == '' || content.trim() == '' || reason.trim() == '') {
                    openModal(7)
                    return
                }

                // turn the info into a json format
                data = {
                    'title': title,
                    'tags': tags,
                    'members': members,
                    'content': content,
                    'reason': reason,
                    'id': <%= ticketList[0].ticketID %>
                }

                // add the code to the database
                fetch('/editticket', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                }).then(response => response.json()).then(result => {
                    document.getElementById("modal3").style.display = 'none'
                    if (result.status == "error") {
                        // open the error modal if there is an error
                        console.log(result)
                        document.getElementById('showAlert').textContent = result.alert
                        openModal(2)
                    } else {
                        window.location.reload()
                    }
                })
            <% } %>
        }
    </script>
    <script>
         <% if (ticketList.length == 0) { %>
            console.log("womp womp")
        <% } else { %>
            <% ticket = ticketList[0] %>

            // get version information
            <% versionInfo = ticket.versionInformation %>

            <% if (versionInfo.length > 0) { %>
                dateCurrent = '<%= ticket.ticketDate %>'
                reasonCurrent = 'First version.'

                // get the accordion
                accordion = document.getElementById("ticketAccordion")
                // reset accordion content
                accordion.innerHTML = ''

                // loop through each version
                <% for (var v = 0; v < versionInfo.length; v ++) { %>
                    // get the information of the version
                    id = <%= v %> + 1
                    title = '<%= versionInfo[v][0] %>'
                    content = '<%= versionInfo[v][1] %>'
                    resolutionDetails = '<%= versionInfo[v][4] %>' // ignore for now, TODO later
                    reasonNext = '<%= versionInfo[v][5] %>'
                    dateNext = '<%= versionInfo[v][6] %>'

                    // setup tags
                    tagString = '<%= versionInfo[v][3] %>';

                    // decode html entities (like &#34;) to actual characters
                    decodedTags = new DOMParser().parseFromString(tagString, 'text/html').body.textContent;
                    tags = JSON.parse(decodedTags);

                    // setup members
                    memberString = '<%= versionInfo[v][3] %>';

                    // decode html entities (like &#34;) to actual characters
                    decodedMembers = new DOMParser().parseFromString(memberString, 'text/html').body.textContent;
                    members = JSON.parse(decodedMembers);

                    // create an accordion item HTML for it
                    accordionItem = `<div class="accordion-item">
                        <h2 class="accordion-header" id="heading1-${id}">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse1-${id}" aria-expanded="true" aria-controls="collapse1-${id}">
                            Version ${id} (${dateCurrent})
                        </button>
                        </h2>
                        <div id="collapse1-${id}" class="accordion-collapse collapse" aria-labelledby="heading1-${id}" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <div class='together'>
                                <div style="width: 100%; flex: 1;">
                                    <p><b>Title: </b> ${title}</p>
                                    <p><b>Tags: </b> ${tags.join(', ')}</p><br>
                                    <b>Members: </b>
                                    <!-- TODO: add copy feature -->
                                    <textarea disabled>${members.join('\n')}</textarea>
                                </div>
                                <div style="width: 100%; flex: 1;">
                                    <b>Content: </b>
                                    <!-- TODO: add copy feature -->
                                    <!-- TODO: make the two heights the same -->
                                    <textarea style="width: 100%; height: 100%;" disabled>${content}</textarea>
                                </div>
                            </div>

                            <p><b>Reason for edit:</b> ${reasonCurrent}</p>
                        </div>
                        </div>
                    </div>`

                    accordion.innerHTML += accordionItem // add to the accordion

                    // update reason and date
                    dateCurrent = dateNext
                    reasonCurrent = reasonNext
                <% } %>

                // current version / reason
                document.getElementById("replyVersionSpan").textContent = `Version ${parseInt(<%= v %>)+2} (${dateCurrent})`
                document.getElementById("replyReasonSpan").textContent = reasonCurrent
            <% } else { %>
                document.getElementById("replyVersionSpan").textContent = `Version 1 (<%= replies[i].replyDate %>)`
                document.getElementById("replyReasonP").style.display = "none"
            <% } %>
        <% } %>
    </script>
</body>
</html>